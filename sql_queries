
Quantity sold =(number of units)
Transaction_count =total transaction qty
Total Sales(Revenue) calculated using =Unit Price*Quantity

-- to check KPIs (Sales, Quantity Sold, and Orders)

SELECT
  round(SUM(unit_price * transaction_qty) )AS total_sales,
  round(SUM(transaction_qty) ) AS total_qty_sold,
  round(COUNT(transaction_id)) AS total_orders
FROM transactions;

---- 1. Total revenue generated
SELECT SUM(transaction_qty * unit_price) AS total_revenue
FROM transactions;
-- 2. Revenue by product category
SELECT 
product_category,
round(SUM(transaction_qty * unit_price) )AS total_revenue

FROM transactions
group by product_category
order by 2 desc;
---- 3. Top 5 best-selling products by quantity
SELECT 
product_type,
round(SUM(transaction_qty) ) AS total_qty_sold
FROM transactions
group by 1 
order by 2 desc

---- 4. Store with highest revenue

SELECT 
store_location,
round(SUM(transaction_qty * unit_price)) AS total_sales,
100*SUM(transaction_qty * unit_price) / 
        SUM(SUM(transaction_qty * unit_price)) OVER (), 2 AS percent_of_total_sales
FROM transactions
group by 1
order by 2 desc;



-- 5. Average unit price by product category

SELECT 
product_category,
avg(unit_price) AS avg_unitprice
FROM transactions
group by product_category
order by 2 desc;

--TOP selling products by sales
SELECT 
product_category,
product_type,
round(SUM(unit_price * transaction_qty) )AS total_sales,
round(SUM(transaction_qty) ) AS total_qty_sold
FROM transactions
group by 1,2 
order by 3 desc

---.What are the monthly, seasonal sales trends over time?
---Analyzing Monthly Sales Trends

SELECT 
        product_type,
		TO_CHAR(transaction_date, 'YYYY-MM') AS sales_month,
        ROUND(SUM(transaction_qty * unit_price)) AS total_revenue,
		round(SUM(transaction_qty) ) AS total_qty_sold
    FROM transactions
    GROUP BY product_type,TO_CHAR(transaction_date, 'YYYY-MM')
	order by 2 desc;

---Analyzing Seasonality

--average number of units sold in each month across all years.
SELECT 
    EXTRACT(MONTH FROM transaction_date) AS month,
    AVG(transaction_qty)  AS avg_units_sold
FROM transactions
GROUP BY month
ORDER BY month;




--- weekday and weekand sales

SELECT 
    CASE 
        WHEN EXTRACT(DOW FROM transaction_date) IN (0, 6) THEN 'Weekend'
        ELSE 'Weekday'
    END AS day_type,
    ROUND(SUM(transaction_qty * unit_price)::numeric, 2) AS total_revenue,
    count(transaction_qty) as transaction_count,
    ROUND(AVG(transaction_qty * unit_price)::numeric, 2) AS avg_revenue_per_transaction
FROM transactions
GROUP BY day_type
ORDER BY day_type;

--- daily sales
SELECT 
    EXTRACT(day FROM transaction_date) AS day,
   SUM(transaction_qty * unit_price) AS total_sales,
   store_location
FROM transactions
GROUP BY 1,3
ORDER BY 2;


 ---Revenue by Hour of Day
SELECT 
    DATE_PART('hour', transaction_time::time) AS hour_of_day,
   SUM(transaction_qty * unit_price) AS total_sales
FROM transactions
GROUP BY 1
ORDER BY 2 desc;

 --Revenue by Time Segment (Morning, Afternoon, Evening, Night)

 SELECT 
    CASE 
        WHEN DATE_PART('hour', transaction_time::time) BETWEEN 6 AND 11 THEN 'Morning'
        WHEN DATE_PART('hour', transaction_time::time) BETWEEN 12 AND 17 THEN 'Afternoon'
        WHEN DATE_PART('hour', transaction_time::time) BETWEEN 18 AND 21 THEN 'Evening'
        ELSE 'Night' END AS time_segment,
		
    count(transaction_qty) as transaction_count,
    ROUND(SUM(transaction_qty * unit_price)::numeric, 2) AS total_sales,
    ROUND(AVG(transaction_qty * unit_price)::numeric, 2) AS avg_sales_per_transaction
FROM transactions
GROUP BY time_segment
ORDER BY total_sales DESC;





— Which product type has the highest average price and quantity sold?

SELECT 
        product_type,
        avg (unit_price) AS avg_unit_price,
		round(SUM(transaction_qty) ) AS total_qty_sold
    FROM transactions
    GROUP BY product_type
	order by 2 desc,3 desc ;

--What’s the average revenue per product type in each store location?

SELECT 
   product_type,
   store_location,
   round(avg(transaction_qty * unit_price) ) AS avg_revenue
FROM transactions
GROUP BY 1,2
ORDER BY store_location , avg_revenue desc

--Are there underperforming products with low sales or revenue?

SELECT 
   product_type,
   round(SUM(transaction_qty)) AS total_qty_sold,
  sum(transaction_qty * unit_price)  AS total_revenue
FROM transactions
GROUP BY 1
ORDER BY  total_qty_sold  asc, total_revenue asc

--
SELECT 
   store_location,
   round(SUM(transaction_qty * unit_price)) AS total_sales
FROM transactions
GROUP BY 1
ORDER BY 2 desc;


--Which products are most popular in each location?

SELECT 
    store_location,
    product_detail,
    SUM(transaction_qty) AS total_units_sold
FROM transactions
GROUP BY 1,2
ORDER BY store_location, total_units_sold DESC;

--- Customer Preferences by Quantity

---ilk olarak quantity'e göre bakalım

SELECT 
    store_location,
    product_category,
    SUM(transaction_qty) AS total_quantity
FROM transactions
GROUP BY 1,2
ORDER BY store_location, total_quantity DESC;

---ikinci olarak revenue'e göre bakalım
SELECT 
    store_location,
    product_category,
    ROUND(SUM(transaction_qty * unit_price)::numeric, 2) AS total_revenue
FROM transactions
GROUP BY 1,2
ORDER BY store_location, total_revenue DESC;





























